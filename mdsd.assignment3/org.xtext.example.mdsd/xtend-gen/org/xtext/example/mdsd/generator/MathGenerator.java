/**
 * generated by Xtext 2.38.0
 */
package org.xtext.example.mdsd.generator;

import com.google.common.collect.Iterators;
import java.util.Arrays;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.ExclusiveRange;
import org.eclipse.xtext.xbase.lib.XbaseGenerated;
import org.xtext.example.mdsd.math.Div;
import org.xtext.example.mdsd.math.Expression;
import org.xtext.example.mdsd.math.ExternalDecl;
import org.xtext.example.mdsd.math.FunctionCall;
import org.xtext.example.mdsd.math.LetBinding;
import org.xtext.example.mdsd.math.MathExp;
import org.xtext.example.mdsd.math.MathNumber;
import org.xtext.example.mdsd.math.Minus;
import org.xtext.example.mdsd.math.Mult;
import org.xtext.example.mdsd.math.Plus;
import org.xtext.example.mdsd.math.VarBinding;
import org.xtext.example.mdsd.math.VariableUse;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathGenerator extends AbstractGenerator {
  private static Map<String, Integer> variables;

  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final MathExp math = Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class).next();
    final String className = math.getName();
    final CharSequence content = this.generateJavaClass(math);
    fsa.generateFile((("math_expression/" + className) + ".java"), content);
  }

  public CharSequence generateJavaClass(final MathExp math) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package math_expression;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = math.getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    {
      boolean _isEmpty = math.getExternals().isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        _builder.append("\t");
        _builder.append("private External external;");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public ");
        String _name_1 = math.getName();
        _builder.append(_name_1, "\t");
        _builder.append("(External external) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("this.external = external;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EList<VarBinding> _variables = math.getVariables();
      for(final VarBinding varriable : _variables) {
        _builder.append("\t");
        _builder.append("public int ");
        String _name_2 = varriable.getName();
        _builder.append(_name_2, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void compute() {");
    _builder.newLine();
    {
      EList<VarBinding> _variables_1 = math.getVariables();
      for(final VarBinding varriable_1 : _variables_1) {
        _builder.append("\t\t");
        String _name_3 = varriable_1.getName();
        _builder.append(_name_3, "\t\t");
        _builder.append(" = ");
        CharSequence _generateExpression = this.generateExpression(varriable_1.getExpression());
        _builder.append(_generateExpression, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    {
      boolean _isEmpty_1 = math.getExternals().isEmpty();
      boolean _not_1 = (!_isEmpty_1);
      if (_not_1) {
        _builder.append("\t");
        _builder.append("public interface External {");
        _builder.newLine();
        {
          EList<ExternalDecl> _externals = math.getExternals();
          for(final ExternalDecl ext : _externals) {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("int ");
            String _name_4 = ext.getName();
            _builder.append(_name_4, "\t\t");
            _builder.append("(");
            {
              int _size = ext.getParameters().size();
              ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _size, true);
              boolean _hasElements = false;
              for(final Integer i : _doubleDotLessThan) {
                if (!_hasElements) {
                  _hasElements = true;
                } else {
                  _builder.appendImmediate(", ", "\t\t");
                }
                _builder.append("int arg");
                _builder.append(i, "\t\t");
              }
            }
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  protected CharSequence _generateExpression(final MathNumber num) {
    StringConcatenation _builder = new StringConcatenation();
    int _value = num.getValue();
    _builder.append(_value);
    return _builder;
  }

  protected CharSequence _generateExpression(final Plus exp) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _generateExpression = this.generateExpression(exp.getLeft());
    _builder.append(_generateExpression);
    _builder.append(" + ");
    CharSequence _generateExpression_1 = this.generateExpression(exp.getRight());
    _builder.append(_generateExpression_1);
    return _builder;
  }

  protected CharSequence _generateExpression(final Minus exp) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _generateExpression = this.generateExpression(exp.getLeft());
    _builder.append(_generateExpression);
    _builder.append(" - ");
    CharSequence _generateExpression_1 = this.generateExpression(exp.getRight());
    _builder.append(_generateExpression_1);
    return _builder;
  }

  protected CharSequence _generateExpression(final Mult exp) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _generateExpression = this.generateExpression(exp.getLeft());
    _builder.append(_generateExpression);
    _builder.append(" * ");
    CharSequence _generateExpression_1 = this.generateExpression(exp.getRight());
    _builder.append(_generateExpression_1);
    return _builder;
  }

  protected CharSequence _generateExpression(final Div exp) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _generateExpression = this.generateExpression(exp.getLeft());
    _builder.append(_generateExpression);
    _builder.append(" / ");
    CharSequence _generateExpression_1 = this.generateExpression(exp.getRight());
    _builder.append(_generateExpression_1);
    return _builder;
  }

  protected CharSequence _generateExpression(final VariableUse use) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = use.getRef().getName();
    _builder.append(_name);
    return _builder;
  }

  protected CharSequence _generateExpression(final LetBinding let) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("new Object() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int result() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final int __shadow = ");
    CharSequence _generateExpression = this.generateExpression(let.getBinding());
    _builder.append(_generateExpression, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("int ");
    String _name = let.getName();
    _builder.append(_name, "\t\t");
    _builder.append(" = __shadow;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return ");
    CharSequence _generateExpression_1 = this.generateExpression(let.getBody());
    _builder.append(_generateExpression_1, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}.result()");
    _builder.newLine();
    return _builder;
  }

  protected CharSequence _generateExpression(final FunctionCall call) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("external.");
    String _name = call.getName().getName();
    _builder.append(_name);
    _builder.append("(");
    {
      EList<Expression> _arguments = call.getArguments();
      boolean _hasElements = false;
      for(final Expression arg : _arguments) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        CharSequence _generateExpression = this.generateExpression(arg);
        _builder.append(_generateExpression);
      }
    }
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    return _builder;
  }

  public EList<String> getNameParameters(final ExternalDecl ext) {
    return ext.getParameters();
  }

  @XbaseGenerated
  public CharSequence generateExpression(final Expression exp) {
    if (exp instanceof Div) {
      return _generateExpression((Div)exp);
    } else if (exp instanceof FunctionCall) {
      return _generateExpression((FunctionCall)exp);
    } else if (exp instanceof LetBinding) {
      return _generateExpression((LetBinding)exp);
    } else if (exp instanceof MathNumber) {
      return _generateExpression((MathNumber)exp);
    } else if (exp instanceof Minus) {
      return _generateExpression((Minus)exp);
    } else if (exp instanceof Mult) {
      return _generateExpression((Mult)exp);
    } else if (exp instanceof Plus) {
      return _generateExpression((Plus)exp);
    } else if (exp instanceof VariableUse) {
      return _generateExpression((VariableUse)exp);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(exp).toString());
    }
  }
}
