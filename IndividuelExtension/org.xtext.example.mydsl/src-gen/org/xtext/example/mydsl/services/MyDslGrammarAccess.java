/*
 * generated by Xtext 2.38.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypesTypeDefParserRuleCall_2_0 = (RuleCall)cTypesAssignment_2.eContents().get(0);
		private final Assignment cVarsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVarsVarDefParserRuleCall_3_0 = (RuleCall)cVarsAssignment_3.eContents().get(0);
		
		//// missing tpyeValidaiton impelemtation file
		//// missing code gerenrator impleemntation
		//Model:
		//    'system' name=ID
		//    (types+=TypeDef)*
		//    (vars+=VarDef)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'system' name=ID
		//(types+=TypeDef)*
		//(vars+=VarDef)*
		public Group getGroup() { return cGroup; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(types+=TypeDef)*
		public Assignment getTypesAssignment_2() { return cTypesAssignment_2; }
		
		//TypeDef
		public RuleCall getTypesTypeDefParserRuleCall_2_0() { return cTypesTypeDefParserRuleCall_2_0; }
		
		//(vars+=VarDef)*
		public Assignment getVarsAssignment_3() { return cVarsAssignment_3; }
		
		//VarDef
		public RuleCall getVarsVarDefParserRuleCall_3_0() { return cVarsVarDefParserRuleCall_3_0; }
	}
	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cFieldsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cFieldsFieldParserRuleCall_4_0_0 = (RuleCall)cFieldsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cFieldsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cFieldsFieldParserRuleCall_4_1_1_0 = (RuleCall)cFieldsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TypeDef:
		//    'type' name=ID '=' '{' (fields+=Field (',' fields+=Field)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'type' name=ID '=' '{' (fields+=Field (',' fields+=Field)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(fields+=Field (',' fields+=Field)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//fields+=Field
		public Assignment getFieldsAssignment_4_0() { return cFieldsAssignment_4_0; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_4_0_0() { return cFieldsFieldParserRuleCall_4_0_0; }
		
		//(',' fields+=Field)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//fields+=Field
		public Assignment getFieldsAssignment_4_1_1() { return cFieldsAssignment_4_1_1; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_4_1_1_0() { return cFieldsFieldParserRuleCall_4_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeFieldTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Field:
		//    name=ID ':' type=FieldType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=FieldType
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=FieldType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//FieldType
		public RuleCall getTypeFieldTypeParserRuleCall_2_0() { return cTypeFieldTypeParserRuleCall_2_0; }
	}
	public class FieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FieldType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUnionUnionTypeParserRuleCall_0_0 = (RuleCall)cUnionAssignment_0.eContents().get(0);
		private final Assignment cArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cArrayLeftSquareBracketRightSquareBracketKeyword_1_0 = (Keyword)cArrayAssignment_1.eContents().get(0);
		
		//FieldType:
		//    union=UnionType array?='[]'?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//union=UnionType array?='[]'?
		public Group getGroup() { return cGroup; }
		
		//union=UnionType
		public Assignment getUnionAssignment_0() { return cUnionAssignment_0; }
		
		//UnionType
		public RuleCall getUnionUnionTypeParserRuleCall_0_0() { return cUnionUnionTypeParserRuleCall_0_0; }
		
		//array?='[]'?
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }
		
		//'[]'
		public Keyword getArrayLeftSquareBracketRightSquareBracketKeyword_1_0() { return cArrayLeftSquareBracketRightSquareBracketKeyword_1_0; }
	}
	public class UnionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.UnionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypesSimpleTypeParserRuleCall_0_0 = (RuleCall)cTypesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypesSimpleTypeParserRuleCall_1_1_0 = (RuleCall)cTypesAssignment_1_1.eContents().get(0);
		
		//UnionType:
		//    types+=SimpleType ('|' types+=SimpleType)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//types+=SimpleType ('|' types+=SimpleType)*
		public Group getGroup() { return cGroup; }
		
		//types+=SimpleType
		public Assignment getTypesAssignment_0() { return cTypesAssignment_0; }
		
		//SimpleType
		public RuleCall getTypesSimpleTypeParserRuleCall_0_0() { return cTypesSimpleTypeParserRuleCall_0_0; }
		
		//('|' types+=SimpleType)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }
		
		//types+=SimpleType
		public Assignment getTypesAssignment_1_1() { return cTypesAssignment_1_1; }
		
		//SimpleType
		public RuleCall getTypesSimpleTypeParserRuleCall_1_1_0() { return cTypesSimpleTypeParserRuleCall_1_1_0; }
	}
	public class SimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SimpleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRefTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SimpleType:
		//    PrimitiveType | RefType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveType | RefType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveType
		public RuleCall getPrimitiveTypeParserRuleCall_0() { return cPrimitiveTypeParserRuleCall_0; }
		
		//RefType
		public RuleCall getRefTypeParserRuleCall_1() { return cRefTypeParserRuleCall_1; }
	}
	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimitiveType");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueStringKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueNumberKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		
		//PrimitiveType:
		//    value=('string' | 'number') // Feature 'value' will hold "string" or "number"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=('string' | 'number')
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//('string' | 'number')
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//'string'
		public Keyword getValueStringKeyword_0_0() { return cValueStringKeyword_0_0; }
		
		//'number'
		public Keyword getValueNumberKeyword_0_1() { return cValueNumberKeyword_0_1; }
	}
	public class RefTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RefType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeTypeDefCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeTypeDefIDTerminalRuleCall_0_1 = (RuleCall)cTypeTypeDefCrossReference_0.eContents().get(1);
		
		//RefType:
		//    type=[TypeDef] // Feature 'type' (cross-reference)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[TypeDef]
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//[TypeDef]
		public CrossReference getTypeTypeDefCrossReference_0() { return cTypeTypeDefCrossReference_0; }
		
		//ID
		public RuleCall getTypeTypeDefIDTerminalRuleCall_0_1() { return cTypeTypeDefIDTerminalRuleCall_0_1; }
	}
	public class VarDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VarDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeTypeDefCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeTypeDefIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeTypeDefCrossReference_3_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueStructValueParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		
		//VarDef:
		//    'var' name=ID ':' type=[TypeDef] '=' value=StructValue;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' name=ID ':' type=[TypeDef] '=' value=StructValue
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=[TypeDef]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[TypeDef]
		public CrossReference getTypeTypeDefCrossReference_3_0() { return cTypeTypeDefCrossReference_3_0; }
		
		//ID
		public RuleCall getTypeTypeDefIDTerminalRuleCall_3_0_1() { return cTypeTypeDefIDTerminalRuleCall_3_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//value=StructValue
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//StructValue
		public RuleCall getValueStructValueParserRuleCall_5_0() { return cValueStructValueParserRuleCall_5_0; }
	}
	public class StructValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.StructValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cEntriesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cEntriesFieldValueParserRuleCall_1_0_0 = (RuleCall)cEntriesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesFieldValueParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//StructValue:
		//    '{' (entries+=FieldValue (',' entries+=FieldValue)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' (entries+=FieldValue (',' entries+=FieldValue)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(entries+=FieldValue (',' entries+=FieldValue)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//entries+=FieldValue
		public Assignment getEntriesAssignment_1_0() { return cEntriesAssignment_1_0; }
		
		//FieldValue
		public RuleCall getEntriesFieldValueParserRuleCall_1_0_0() { return cEntriesFieldValueParserRuleCall_1_0_0; }
		
		//(',' entries+=FieldValue)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//entries+=FieldValue
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }
		
		//FieldValue
		public RuleCall getEntriesFieldValueParserRuleCall_1_1_1_0() { return cEntriesFieldValueParserRuleCall_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class FieldValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FieldValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//FieldValue:
		//    name=ID ':' value=Value
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' value=Value
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArrayValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStructValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Value:
		//    Literal
		//    | VarRef
		//    | ArrayValue
		//    | StructValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Literal
		//| VarRef
		//| ArrayValue
		//| StructValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }
		
		//VarRef
		public RuleCall getVarRefParserRuleCall_1() { return cVarRefParserRuleCall_1; }
		
		//ArrayValue
		public RuleCall getArrayValueParserRuleCall_2() { return cArrayValueParserRuleCall_2; }
		
		//StructValue
		public RuleCall getStructValueParserRuleCall_3() { return cStructValueParserRuleCall_3; }
	}
	public class VarRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VarRef");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefVarDefCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefVarDefIDTerminalRuleCall_0_1 = (RuleCall)cRefVarDefCrossReference_0.eContents().get(1);
		
		//VarRef:
		//    ref=[VarDef]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[VarDef]
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//[VarDef]
		public CrossReference getRefVarDefCrossReference_0() { return cRefVarDefCrossReference_0; }
		
		//ID
		public RuleCall getRefVarDefIDTerminalRuleCall_0_1() { return cRefVarDefIDTerminalRuleCall_0_1; }
	}
	public class ArrayValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ArrayValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cElementsValueParserRuleCall_1_0_0 = (RuleCall)cElementsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cElementsValueParserRuleCall_1_1_1_0 = (RuleCall)cElementsAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ArrayValue:
		//    '[' (elements+=Value (',' elements+=Value)*)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' (elements+=Value (',' elements+=Value)*)? ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//(elements+=Value (',' elements+=Value)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//elements+=Value
		public Assignment getElementsAssignment_1_0() { return cElementsAssignment_1_0; }
		
		//Value
		public RuleCall getElementsValueParserRuleCall_1_0_0() { return cElementsValueParserRuleCall_1_0_0; }
		
		//(',' elements+=Value)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//elements+=Value
		public Assignment getElementsAssignment_1_1_1() { return cElementsAssignment_1_1_1; }
		
		//Value
		public RuleCall getElementsValueParserRuleCall_1_1_1_0() { return cElementsValueParserRuleCall_1_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Literal:
		//    StringLiteral | NumberLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//StringLiteral | NumberLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_0() { return cStringLiteralParserRuleCall_0; }
		
		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_1() { return cNumberLiteralParserRuleCall_1; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//    value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NumberLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberLiteral:
		//    value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	
	
	private final ModelElements pModel;
	private final TypeDefElements pTypeDef;
	private final FieldElements pField;
	private final FieldTypeElements pFieldType;
	private final UnionTypeElements pUnionType;
	private final SimpleTypeElements pSimpleType;
	private final PrimitiveTypeElements pPrimitiveType;
	private final RefTypeElements pRefType;
	private final VarDefElements pVarDef;
	private final StructValueElements pStructValue;
	private final FieldValueElements pFieldValue;
	private final ValueElements pValue;
	private final VarRefElements pVarRef;
	private final ArrayValueElements pArrayValue;
	private final LiteralElements pLiteral;
	private final StringLiteralElements pStringLiteral;
	private final NumberLiteralElements pNumberLiteral;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pTypeDef = new TypeDefElements();
		this.pField = new FieldElements();
		this.pFieldType = new FieldTypeElements();
		this.pUnionType = new UnionTypeElements();
		this.pSimpleType = new SimpleTypeElements();
		this.pPrimitiveType = new PrimitiveTypeElements();
		this.pRefType = new RefTypeElements();
		this.pVarDef = new VarDefElements();
		this.pStructValue = new StructValueElements();
		this.pFieldValue = new FieldValueElements();
		this.pValue = new ValueElements();
		this.pVarRef = new VarRefElements();
		this.pArrayValue = new ArrayValueElements();
		this.pLiteral = new LiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pNumberLiteral = new NumberLiteralElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// missing tpyeValidaiton impelemtation file
	//// missing code gerenrator impleemntation
	//Model:
	//    'system' name=ID
	//    (types+=TypeDef)*
	//    (vars+=VarDef)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//TypeDef:
	//    'type' name=ID '=' '{' (fields+=Field (',' fields+=Field)*)? '}';
	public TypeDefElements getTypeDefAccess() {
		return pTypeDef;
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}
	
	//Field:
	//    name=ID ':' type=FieldType
	//;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//FieldType:
	//    union=UnionType array?='[]'?
	//;
	public FieldTypeElements getFieldTypeAccess() {
		return pFieldType;
	}
	
	public ParserRule getFieldTypeRule() {
		return getFieldTypeAccess().getRule();
	}
	
	//UnionType:
	//    types+=SimpleType ('|' types+=SimpleType)*
	//;
	public UnionTypeElements getUnionTypeAccess() {
		return pUnionType;
	}
	
	public ParserRule getUnionTypeRule() {
		return getUnionTypeAccess().getRule();
	}
	
	//SimpleType:
	//    PrimitiveType | RefType
	//;
	public SimpleTypeElements getSimpleTypeAccess() {
		return pSimpleType;
	}
	
	public ParserRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}
	
	//PrimitiveType:
	//    value=('string' | 'number') // Feature 'value' will hold "string" or "number"
	//;
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return pPrimitiveType;
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}
	
	//RefType:
	//    type=[TypeDef] // Feature 'type' (cross-reference)
	//;
	public RefTypeElements getRefTypeAccess() {
		return pRefType;
	}
	
	public ParserRule getRefTypeRule() {
		return getRefTypeAccess().getRule();
	}
	
	//VarDef:
	//    'var' name=ID ':' type=[TypeDef] '=' value=StructValue;
	public VarDefElements getVarDefAccess() {
		return pVarDef;
	}
	
	public ParserRule getVarDefRule() {
		return getVarDefAccess().getRule();
	}
	
	//StructValue:
	//    '{' (entries+=FieldValue (',' entries+=FieldValue)*)? '}';
	public StructValueElements getStructValueAccess() {
		return pStructValue;
	}
	
	public ParserRule getStructValueRule() {
		return getStructValueAccess().getRule();
	}
	
	//FieldValue:
	//    name=ID ':' value=Value
	//;
	public FieldValueElements getFieldValueAccess() {
		return pFieldValue;
	}
	
	public ParserRule getFieldValueRule() {
		return getFieldValueAccess().getRule();
	}
	
	//Value:
	//    Literal
	//    | VarRef
	//    | ArrayValue
	//    | StructValue
	//;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//VarRef:
	//    ref=[VarDef]
	//;
	public VarRefElements getVarRefAccess() {
		return pVarRef;
	}
	
	public ParserRule getVarRefRule() {
		return getVarRefAccess().getRule();
	}
	
	//ArrayValue:
	//    '[' (elements+=Value (',' elements+=Value)*)? ']';
	public ArrayValueElements getArrayValueAccess() {
		return pArrayValue;
	}
	
	public ParserRule getArrayValueRule() {
		return getArrayValueAccess().getRule();
	}
	
	//Literal:
	//    StringLiteral | NumberLiteral;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//StringLiteral:
	//    value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//NumberLiteral:
	//    value=INT;
	public NumberLiteralElements getNumberLiteralAccess() {
		return pNumberLiteral;
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
