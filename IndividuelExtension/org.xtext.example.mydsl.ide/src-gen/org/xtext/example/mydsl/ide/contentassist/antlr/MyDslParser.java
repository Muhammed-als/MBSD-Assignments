/*
 * generated by Xtext 2.38.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSimpleTypeAccess().getAlternatives(), "rule__SimpleType__Alternatives");
			builder.put(grammarAccess.getPrimitiveTypeAccess().getValueAlternatives_0(), "rule__PrimitiveType__ValueAlternatives_0");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getTypeDefAccess().getGroup(), "rule__TypeDef__Group__0");
			builder.put(grammarAccess.getTypeDefAccess().getGroup_4(), "rule__TypeDef__Group_4__0");
			builder.put(grammarAccess.getTypeDefAccess().getGroup_4_1(), "rule__TypeDef__Group_4_1__0");
			builder.put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
			builder.put(grammarAccess.getFieldTypeAccess().getGroup(), "rule__FieldType__Group__0");
			builder.put(grammarAccess.getUnionTypeAccess().getGroup(), "rule__UnionType__Group__0");
			builder.put(grammarAccess.getUnionTypeAccess().getGroup_1(), "rule__UnionType__Group_1__0");
			builder.put(grammarAccess.getVarDefAccess().getGroup(), "rule__VarDef__Group__0");
			builder.put(grammarAccess.getStructValueAccess().getGroup(), "rule__StructValue__Group__0");
			builder.put(grammarAccess.getStructValueAccess().getGroup_1(), "rule__StructValue__Group_1__0");
			builder.put(grammarAccess.getStructValueAccess().getGroup_1_1(), "rule__StructValue__Group_1_1__0");
			builder.put(grammarAccess.getFieldValueAccess().getGroup(), "rule__FieldValue__Group__0");
			builder.put(grammarAccess.getArrayValueAccess().getGroup(), "rule__ArrayValue__Group__0");
			builder.put(grammarAccess.getArrayValueAccess().getGroup_1(), "rule__ArrayValue__Group_1__0");
			builder.put(grammarAccess.getArrayValueAccess().getGroup_1_1(), "rule__ArrayValue__Group_1_1__0");
			builder.put(grammarAccess.getModelAccess().getNameAssignment_1(), "rule__Model__NameAssignment_1");
			builder.put(grammarAccess.getModelAccess().getTypesAssignment_2(), "rule__Model__TypesAssignment_2");
			builder.put(grammarAccess.getModelAccess().getVarsAssignment_3(), "rule__Model__VarsAssignment_3");
			builder.put(grammarAccess.getTypeDefAccess().getNameAssignment_1(), "rule__TypeDef__NameAssignment_1");
			builder.put(grammarAccess.getTypeDefAccess().getFieldsAssignment_4_0(), "rule__TypeDef__FieldsAssignment_4_0");
			builder.put(grammarAccess.getTypeDefAccess().getFieldsAssignment_4_1_1(), "rule__TypeDef__FieldsAssignment_4_1_1");
			builder.put(grammarAccess.getFieldAccess().getNameAssignment_0(), "rule__Field__NameAssignment_0");
			builder.put(grammarAccess.getFieldAccess().getTypeAssignment_2(), "rule__Field__TypeAssignment_2");
			builder.put(grammarAccess.getFieldTypeAccess().getUnionAssignment_0(), "rule__FieldType__UnionAssignment_0");
			builder.put(grammarAccess.getFieldTypeAccess().getArrayAssignment_1(), "rule__FieldType__ArrayAssignment_1");
			builder.put(grammarAccess.getUnionTypeAccess().getTypesAssignment_0(), "rule__UnionType__TypesAssignment_0");
			builder.put(grammarAccess.getUnionTypeAccess().getTypesAssignment_1_1(), "rule__UnionType__TypesAssignment_1_1");
			builder.put(grammarAccess.getPrimitiveTypeAccess().getValueAssignment(), "rule__PrimitiveType__ValueAssignment");
			builder.put(grammarAccess.getRefTypeAccess().getTypeAssignment(), "rule__RefType__TypeAssignment");
			builder.put(grammarAccess.getVarDefAccess().getNameAssignment_1(), "rule__VarDef__NameAssignment_1");
			builder.put(grammarAccess.getVarDefAccess().getTypeAssignment_3(), "rule__VarDef__TypeAssignment_3");
			builder.put(grammarAccess.getVarDefAccess().getValueAssignment_5(), "rule__VarDef__ValueAssignment_5");
			builder.put(grammarAccess.getStructValueAccess().getEntriesAssignment_1_0(), "rule__StructValue__EntriesAssignment_1_0");
			builder.put(grammarAccess.getStructValueAccess().getEntriesAssignment_1_1_1(), "rule__StructValue__EntriesAssignment_1_1_1");
			builder.put(grammarAccess.getFieldValueAccess().getNameAssignment_0(), "rule__FieldValue__NameAssignment_0");
			builder.put(grammarAccess.getFieldValueAccess().getValueAssignment_2(), "rule__FieldValue__ValueAssignment_2");
			builder.put(grammarAccess.getVarRefAccess().getRefAssignment(), "rule__VarRef__RefAssignment");
			builder.put(grammarAccess.getArrayValueAccess().getElementsAssignment_1_0(), "rule__ArrayValue__ElementsAssignment_1_0");
			builder.put(grammarAccess.getArrayValueAccess().getElementsAssignment_1_1_1(), "rule__ArrayValue__ElementsAssignment_1_1_1");
			builder.put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
			builder.put(grammarAccess.getNumberLiteralAccess().getValueAssignment(), "rule__NumberLiteral__ValueAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
